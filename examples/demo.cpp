//===========================================================================
// Title:  Xavier: High-Performance X-Drop Adaptive Banded Pairwise Alignment
// Author: G. Guidi, E. Younis
// Date:   29 April 2019
//===========================================================================

#include <vector>
#include <iostream>
#include <fstream>
#include <string.h>
#include <algorithm>
#include <chrono>
#include <stdlib.h>
#include <inttypes.h>
#include <assert.h>
#include <iterator>
#include <x86intrin.h>
#include "xavier.h"

//===========================================================================
// SEQUENCE GENERATION (source: https://github.com/ocxtal/libgaba)
//===========================================================================

// char random_base(void)
// {
// 	char const table[4] = {'A', 'C', 'G', 'T'};
// 	return(table[rand() % 4]);
// }

// void generate_random_sequence(std::string& seq, unsigned int const& len)
// {
// 	for(int i = 0; i < len; i++)
// 		seq.append(1, random_base());
// }

// std::string generate_mutated_sequence(std::string& seq, unsigned int const& len,
// 	unsigned short const& bw, double const& indels, double const& substs)
// {
// 	int i, j, wave = 0;	// wave is q-coordinate of the alignment path
// 	std::string mutated;

// 	for(i = 0, j = 0; i < len; i++)
// 	{
// 		if(((double)rand()/(double)RAND_MAX) < substs)
// 		{
// 			mutated.append(1, random_base());
// 			j++; // mismatch
// 		}
// 		else if(((double)rand()/(double)RAND_MAX) < indels)
// 		{
// 			if(rand() & 0x01 && wave > (-bw + 1))
// 			{
// 				char tmp = (j < len) ? seq[j++] : random_base();
// 				mutated.append(1, tmp);
// 				j++; wave--; // deletion
// 			}
// 			else if(wave < (bw-2))
// 			{
// 				mutated.append(1, random_base());
// 				wave++; // insertion
// 			}
// 			else
// 			{
// 				char tmp = (j < len) ? seq[j++] : random_base();
// 				mutated.append(1, tmp);
// 			}
// 		}
// 		else
// 		{
// 			char tmp = (j < len) ? seq[j++] : random_base();
// 			mutated.append(1, tmp);
// 		}
// 	}
// 	return mutated;
// }

//======================================================================
// DEMO
//======================================================================

int main(int argc, char const *argv[])
{
	srand(time(NULL));
	/* Declarations */
	std::string seq1, seq2;

	// /* Sequences length */
	// unsigned int len1 = 17;
	// unsigned int len2 = 17;

	// /* Bandwidth (the alignment path of the input sequence and the result does not go out of the band) */
	// unsigned short bw = 32;

	// /* Error rate composition */
	// double indels = 0.42; // indels probability
	// double substs = 0.03; // substitution probability

	/* Penalties (XAVIER temporarily supports only linear gap penalty) */
	short match    =  1;
	short mismatch = -1;
	short gap 	   = -1;

	/* Initialize scoring scheme */
	xavier::ScoringScheme penalties(match, mismatch, gap);

	/* Generate pair of sequences */
	// generate_random_sequence(seq1, len1);
	// seq1 = "GCTCGTTACCGTATGGTTAGGAGGCACTCCCGAGCCTCCAAGTACCAAATATGCGCAGTACAAGCTACTTGCCCGTGCTACGTGCTCAACCAAGGGATCGACACGCGGAGCTTCGCGGCCTTAGTTCTTGCGTGCTGGGGCAATATTTCATTCATGGCGGAGGCAAGGCGATACCCAAAACAGCGAGTGTATAGCGGCGATGCGAACGGTGCTAAAAACGATTTACAACCTGTGAAGGATGCTCATTCTCGCACATATGTTCCGTTGCTAGCCGCCGAGGAGTGAGGCAGCTATTGATTTACCATTTTTACCCTCGGCCTTTGAGACCCACAATACGACTAGCTCAGTACGGGCCGGAGAATGTCAGACCGCGAACTGGAATCGGTCACCGGATTTCACGCTAGTACTGACGTCGTACATTTTTCGGAGCAGAGCCGATTTGCCCAACCGGAGGACGGACTGGTTGTAGCACGCTATAACGCTGGTTCCGGTGTCCTCAGAGAGGGGGAGCGAATGCGTGCTTTGGATATTCTAACTGACGACTTCTTCGTGAAAGCTCAGGAGTGCTTGTGCTGAGGGACTCAAGGATCATGTCGAGCTTTTCTAACTCCATGACAAGTGCGACCACCCAATGAACCCCCGGCAAATACAGCGGGTATGTTCTATTGAGTTCTAGCGTATGGTCTGAACTCCGTGTATCAGCGCGTCTCCTGCATGTTATGCCGGGTGCCTATTTTCAATACAGATCTACAAGATCGCCAAGGCTTCATCCGAAATCCAAGAGCAGACACAAAGCTGGTAAGTAGCAGCGCACGAAGATCGACCGCGCCCTCATAGACCCGGATTGTCAGCACTAACTTACCTACTTCGCGCGTTCATGTGTCGTCACTCCAGATTTGAGACTGCCGGTAGAATATCGAGCATAGAATTTAACTTATACTACGGAGGTAAAAGATAAACTTGAACCCTGCTTGTGTAGTAAACCTAACCGCCATATTAG";
	// seq1 = "CTTTTAGATAGACTAAGTAGGGAAGGCCCAGAAAAGTAGGGAAGCCATAAGATAAGAAAAAACAAAAAAAACGGAAGGTCAGAAGAATACCGTCCGATAACTTAATCCAATTAACCGTAAAACCGTCTGATAGAAAAACACTCCGCAGGAGAGCAACGTCAGACAAAAAGGAGTTCAAAATGCCTAGTTCTTCAACGGAAGAAAGGTGAGGTTACGGTGGCGCGGGCCACGTAGGTTCAAAAGCCTGGAAAGTACCGCTTATGCTACTTCGGTAAAACGGGGAGCAGGGTTAACCTATCGTGGTTATGGCATTCACTGACTTAGCCAACCATGCACATTTAAGGAAGTGGCCACACTTTTGCTGTTACTGGTCACTCTACGACACCACAAGAGTTGGATGCCACAAAAACTCGCCTTGATGGCTCGTGGTGCTTATACCCAGCCGAGTTGTAAGCAAGCGCTGGAGCTGATCCGGGCTGCTGCGCATCCCATGGACGTTGATCGTACAGGGTGCTCTTTGTGCTGGGAAATTTAAGAACCAAGAAACCCGATTTTCGCCAGCAGCTTGACGCCGAACAGAGCGCATTGCTGGACGCTGTTCCCTTGCCGATCATCTGTTACTGGTTCGTTTTAGCCCGATGGTGTGCGTATCGATACGCAAGACCATCGCAAAGATGCATCGTGCGGGTTACTCCTCAAAGCTAACCGGAAAAAGAGACCCCAGTGAACTGCATAAACACGGTGATGCATTGTCTGGCTGATTGTAATGGCGGAGCATGAGTTTAATTGACCTCATACCTTTTGGCCGCTCGTGTGTTGACCTCAACGCCTCTCTGATATCCTACTACCGTTGTACAAGCGGCGATTGTCACTTGGCGTGGCCCCTTTTGCTGTGGCGTAACGAGGCCCGATGGAGATGATGCGAAAACTTGGCAAACGCTAGAAGGAGGGCGGAAAGCAATGATCCTGCGCATGTTGGCCCAACAAAGAGAAAATCAGTGGCTTTGGTCATGCGGATTTTCGCGAAAGCGACACCGCGTTAATGCCTGATACAAGCGGTTGGGTTCAGAAGCTTTGTCAGAAGCGTGTGGGGCGATACACCATCTTACGCCGTCTCAGAGACGGTGGGAAGCTGGTTGATGAAACGCGAGAAAAGAATCTGTTTTGTTCAATGCTGGGACTTCTCCACGCCTCGGCCTAAATCACTCTCCATGGCACATTCCCCACCCAAGCTGTTTACGC";
	// seq2 = "TAAAATACTTCTTTTTCATAAACGATCGGGTTTAGGTGAAAAATTCCAAACAAAAAGAGTTTGGACAATCGCCTTAAAAAAACCTACTGTATACGCATACAGCATGCATAAAGGAACAGCTAAGAATGCAGATTCAAACTCAACTCGACTCTCTTCTCGTTTTAACGTGTTTAGCTAGCAACCCGTACCTTATGAATGTTTCTGATCAGTTGTTGCAAAGCTTGGCTAATCTTTCCGCTAAAAATCAGTGGATTTTGTTTCCAGCTGGAGTGCCAGACCTGACTTGCACAACTACTGTTCCAATTATCCGCGTGCCAGCATGTCATCCAAATGAAGCTTACTCAGACGATGACTAATATGGAGATCTGATAAGCAATTCGCTCAGGCAAATTGCCGCCTGCGGGTTTGGTCGCTTCCGATCCGAAACGATTTGCATTAACCAATCTTATTTGCTTAGGCGATTCTCGCTCCGCGAAGTATTGGCTGTGAAGTATTTTCGTTGAAGGCAGGAGACACAAGATCAACTAACAAGTTCTAAACGTTATCCATCTTCATCTCGCCTCCCCAAATTAGAGGAGGCATCTTTTGTTGTGGCAAAACAAAGGGCAAACGTTTGCCTTGTCTTCTCTGGCGACTTAAAATAGTTTCTGGTATCAAGTGGCCCCGGTAATCTGATGAATCCGTTAGATTTTGTTGCCGACTTCATGTCCCGCATTACGTAGAAATTATTATAGGAATGTCAAAATTGAGCACCCTTGACTGAACCAAAGTACTTGCGTCCAACGATGGACACCCATCCGCAACCGATAACCTGTCACACAGTGGAAAAGTTTCGTTCTTGTTTACTCGTTGACCCGGACAAGACAGTGACCGACTGATTAAAGAGAAAGGATACAATGTTGGCCAGCTGACGCCCCGTATGGCGATCATGGTGATCCCAGTGACCCGTATTTCCGCCTTTATTGATTGCGCATTGGCACGAAGAAGTAACGGTTGACGGCGTGCCGTGGGAAAAGGCCGCAGCGTTCAATGCCATTTCAAACCAAGTTGGTTTGTTTGTTCAAAGAAAATGGTTCTCGCTGACAGCAACATTTTGGATATTCACCATCCTTTTGTCTGGATCGTTATGAGAAGCCAAACCGGGTTGAAATCGAAGCCAATTTTGCCGCAAGTACATTACTGGTTCCAATGTGGCTGGTGCTACGAAAAGGGGGAGCGTGAATCTGTGCTGGTAATCACTACCTTGAAGGCTTGGAAACAGACAAGCATGCCGGATCTGCTCATGAACGCCATCAACAAAAGGCATTTTGAAGGGCATCCTAGGGTGTTCCAGAAGGGCAGACGACGTTAATTCACGGCCAAAAATATCGCCGACAACTTTGCCGCCGTTTATTTCTGAGTGCTGAGCGATATCGGCGCTTTACGGAAAACCTGCTAAAAGACGGCTTGGAAGTGATCAGTGGAGCATTGGGCGAACGTGGGTCAAATCTTTTGTAGATACCAAATTGAATTTGTTATGTCACGGACGCGGGCTGGTAAAATGAAAAACTGATTTACATAGGATGGAAGTAGGTTACGCCAGATTCGTACGAATTTGGGATGGCCGCAGCGTATCAAGCAGGGCAAAATTGTGGAGGAATTCAAAAAAGAAGGCTTTAGACAATTCTTACTCAAACTACTTCCGTGACTCCAGATATTTTACTGAATTAAAGACCAATGCCTGAACGTGAAAGCGCTCGCAGAGACAAACGAACTGCCTACGAGAAGCACTAATGCCGTTCTCGTACTTACTATCAACTGGCAGAGAAAAAATTACCGGCAAAGAGGATCGTCTTAAGCGACAATCCAAAGCAAGAAACATCGAATTCTTGAGCAGAATACCCGATTTGAATTGACTAAGCCGGAAACCTAGCATTAAAAAACAAAAAAAACG";//generate_mutated_sequence(seq1, len2, bw, indels, substs);
	// seq
	// seq
	// seq1 = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
	// seq2 = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	seq1 = "ACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTG";
	seq
	/* x-drop value */
	unsigned short x = 15;

	/* seed/k-mer length */
	unsigned short k = 17;

	// int len1 = seq1.length();
	// int len2 = seq2.length();
	/* seed starting position on seq1, seed starting position on seq2, k-mer lenght */
	xavier::Seed seed(0, 0, k);

	//===================================================================
	// Xavier: High-Performance X-Drop Adaptive Banded Pairwise Alignment
	//===================================================================

	// xavier::Aligner aligner( seq1, seq2, penalties, x );
	// // xavier::AlignmentResult result = aligner.initAntiDiags();
	// std::vector< std::vector<int> > DPMatrix = aligner.initAntiDiags();
	// printf( "    " );
	// for ( int x = 0; x < DPMatrix.size(); ++x )
	// {
	// 	printf( "%4c", aligner.getQueryH()[x] );
	// }
	// std::cout << std::endl;
	// for ( int x = 0; x < DPMatrix.size(); ++x )
	// {
	// 	printf( "%4c", aligner.getQueryV()[x] );
	// 	for ( int y = 0; y < DPMatrix.size(); ++y )
	// 	{
	// 		// std::cout << DPMatrix[x][y] << " ";
	// 		printf( "%4d", DPMatrix[x][y] );
	// 	}
	// 	std::cout << std::endl;
	// }
	// std::cout << aligner.getAntiDiag1() << std::endl;
	// std::cout << aligner.getAntiDiag2() << std::endl;
	// std::cout << aligner.getAntiDiag3() << std::endl;
	// std::cout << aligner.getVQueryH() << std::endl;
	// std::cout << aligner.getVQueryV() << std::endl;
	// std::cout << aligner.getBestScore() << std::endl;
	// std::cout << aligner.getCurrScore() << std::endl;


	xavier::AlignmentResult result = xavier::seed_and_extend_right( seq1, seq2, penalties, x, seed );
	std::cout << "result.bestScore	" << result.bestScore << std::endl;
	std::cout << "result.exitScore	" << result.exitScore << std::endl;
	std::cout << "result.begH	" << result.begH << std::endl;
	std::cout << "result.endH	" << result.endH << std::endl;
	std::cout << "result.begV	" << result.begV << std::endl;
	std::cout << "result.endV	" << result.endV << std::endl;
	std::cout << "result.matches " << result.matched_pair.matches << std::endl;
	std::cout << "result.cigar "   << result.matched_pair.cigar   << std::endl;

	return 0;
}
